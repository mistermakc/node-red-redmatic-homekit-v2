{"version":3,"file":"protocol.js","sourceRoot":"","sources":["../../../../src/turn/protocol.ts"],"names":[],"mappings":"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","sourcesContent":["import { createHash } from \"crypto\";\nimport { jspack } from \"@shinyoshiaki/jspack\";\nimport debug from \"debug\";\nimport PCancelable from \"p-cancelable\";\nimport { setTimeout } from \"timers/promises\";\nimport { Event, EventDisposer } from \"../imports/common\";\n\nimport { bufferReader, int } from \"../../../common/src\";\nimport type { InterfaceAddresses } from \"../../../common/src/network\";\nimport type { Candidate } from \"../candidate\";\nimport { TransactionFailed } from \"../exceptions\";\nimport { type Future, future, randomTransactionId } from \"../helper\";\nimport type { Connection } from \"../ice\";\nimport { classes, methods } from \"../stun/const\";\nimport { Message, paddingLength, parseMessage } from \"../stun/message\";\nimport { Transaction } from \"../stun/transaction\";\nimport { TcpTransport, type Transport, UdpTransport } from \"../transport\";\nimport type { Address, Protocol } from \"../types/model\";\n\nconst log = debug(\"werift-ice:packages/ice/src/turn/protocol.ts\");\n\nconst DEFAULT_CHANNEL_REFRESH_TIME = 500;\nconst DEFAULT_ALLOCATION_LIFETIME = 600;\nconst UDP_TRANSPORT = 0x11000000;\n\nexport class StunOverTurnProtocol implements Protocol {\n  static type = \"turn\";\n  readonly type = StunOverTurnProtocol.type;\n  localCandidate!: Candidate;\n  private disposer = new EventDisposer();\n\n  constructor(\n    public turn: TurnProtocol,\n    private ice: Connection,\n  ) {\n    turn.onData\n      .subscribe((data, addr) => {\n        this.handleStunMessage(data, addr);\n      })\n      .disposer(this.disposer);\n  }\n\n  private handleStunMessage = (data: Buffer, addr: Address) => {\n    try {\n      const message = parseMessage(data);\n      if (!message) {\n        this.ice.dataReceived(data, this.localCandidate.component);\n        return;\n      }\n\n      if (\n        message.messageClass === classes.RESPONSE ||\n        message.messageClass === classes.ERROR\n      ) {\n        const transaction = this.turn.transactions[message.transactionIdHex];\n        if (transaction) {\n          transaction.responseReceived(message, addr);\n        }\n      } else if (message.messageClass === classes.REQUEST) {\n        this.ice.requestReceived(message, addr, this, data);\n      }\n    } catch (error) {\n      log(\"datagramReceived error\", error);\n    }\n  };\n\n  async request(request: Message, addr: Address, integrityKey?: Buffer) {\n    if (this.turn.transactions[request.transactionIdHex]) {\n      throw new Error(\"exist\");\n    }\n\n    if (integrityKey) {\n      request.addMessageIntegrity(integrityKey);\n      request.addFingerprint();\n    }\n\n    const transaction = new Transaction(request, addr, this);\n    this.turn.transactions[request.transactionIdHex] = transaction;\n\n    try {\n      return await transaction.run();\n    } catch (e) {\n      throw e;\n    } finally {\n      delete this.turn.transactions[request.transactionIdHex];\n    }\n  }\n  async connectionMade() {}\n  async sendData(data: Buffer, addr: Address) {\n    await this.turn.sendData(data, addr);\n  }\n  async sendStun(message: Message, addr: Address) {\n    await this.turn.sendData(message.bytes, addr);\n  }\n  async close() {\n    this.disposer.dispose();\n    return this.turn.close();\n  }\n}\n\nexport class TurnProtocol implements Protocol {\n  static type = \"turn\";\n  readonly type = TurnProtocol.type;\n  readonly onData = new Event<[Buffer, Address]>();\n  integrityKey?: Buffer;\n  nonce?: Buffer;\n  realm?: string;\n  relayedAddress!: Address;\n  mappedAddress!: Address;\n  localCandidate!: Candidate;\n  transactions: { [hexId: string]: Transaction } = {};\n  private refreshHandle?: Future;\n  private channelNumber = 0x4000;\n  private channelByAddr: {\n    [addr: string]: { number: number; address: Address };\n  } = {};\n  private addrByChannel: { [channel: number]: Address } = {};\n  /**sec */\n  private channelRefreshTime: number;\n  private channelBinding?: Promise<void>;\n  private channelRefreshAt = 0;\n  private tcpBuffer: Buffer = Buffer.alloc(0);\n  private permissionByAddr: { [addr: string]: boolean } = {};\n  private creatingPermission: Promise<void> = Promise.resolve();\n\n  constructor(\n    public server: Address,\n    public username: string,\n    public password: string,\n    public lifetime: number,\n    public transport: Transport,\n    public options: {\n      /**sec */\n      channelRefreshTime?: number;\n    } = {},\n  ) {\n    this.channelRefreshTime =\n      this.options.channelRefreshTime ?? DEFAULT_CHANNEL_REFRESH_TIME;\n  }\n\n  async connectionMade() {\n    this.transport.onData = (data, addr) => {\n      this.dataReceived(data, addr);\n    };\n\n    const request = new Message(methods.ALLOCATE, classes.REQUEST);\n    request\n      .setAttribute(\"LIFETIME\", this.lifetime)\n      .setAttribute(\"REQUESTED-TRANSPORT\", UDP_TRANSPORT);\n\n    const [response] = await this.requestWithRetry(request, this.server).catch(\n      (e) => {\n        log(\"connect error\", e);\n        throw e;\n      },\n    );\n    this.relayedAddress = response.getAttributeValue(\"XOR-RELAYED-ADDRESS\");\n    this.mappedAddress = response.getAttributeValue(\"XOR-MAPPED-ADDRESS\");\n    const exp = response.getAttributeValue(\"LIFETIME\");\n    log(\"connect\", this.relayedAddress, this.mappedAddress, { exp });\n\n    this.refreshHandle = future(this.refresh(exp));\n  }\n\n  private handleChannelData(data: Buffer) {\n    const [channel, length] = jspack.Unpack(\"!HH\", data.slice(0, 4));\n    const addr = this.addrByChannel[channel];\n\n    if (addr) {\n      const payload = data.subarray(4, 4 + length);\n      this.onData.execute(payload, addr);\n    }\n  }\n\n  private handleSTUNMessage(data: Buffer, addr: Address) {\n    try {\n      const message = parseMessage(data);\n      if (!message) {\n        throw new Error(\"not stun message\");\n      }\n\n      if (\n        message.messageClass === classes.RESPONSE ||\n        message.messageClass === classes.ERROR\n      ) {\n        const transaction = this.transactions[message.transactionIdHex];\n        if (transaction) {\n          transaction.responseReceived(message, addr);\n        }\n      } else if (message.messageClass === classes.REQUEST) {\n        this.onData.execute(data, addr);\n      }\n\n      if (message.getAttributeValue(\"DATA\")) {\n        const buf: Buffer = message.getAttributeValue(\"DATA\");\n        this.onData.execute(buf, addr);\n      }\n    } catch (error) {\n      log(\"parse error\", data.toString());\n    }\n  }\n\n  private dataReceived(data: Buffer, addr: Address) {\n    const datagramReceived = (data: Buffer, addr: Address) => {\n      if (data.length >= 4 && isChannelData(data)) {\n        this.handleChannelData(data);\n      } else {\n        this.handleSTUNMessage(data, addr);\n      }\n    };\n\n    if (this.transport.type === \"tcp\") {\n      this.tcpBuffer = Buffer.concat([this.tcpBuffer, data]);\n      while (this.tcpBuffer.length >= 4) {\n        let [, length] = bufferReader(this.tcpBuffer.subarray(0, 4), [2, 2]);\n        length += paddingLength(length);\n        const fullLength = isChannelData(this.tcpBuffer)\n          ? 4 + length\n          : 20 + length;\n        if (this.tcpBuffer.length < fullLength) {\n          break;\n        }\n\n        datagramReceived(this.tcpBuffer.subarray(0, fullLength), addr);\n        this.tcpBuffer = this.tcpBuffer.subarray(fullLength);\n      }\n    } else {\n      datagramReceived(data, addr);\n    }\n  }\n\n  private async send(data: Buffer, addr: Address) {\n    if (this.transport.type === \"tcp\") {\n      const padding = paddingLength(data.length);\n      await this.transport.send(\n        padding > 0 ? Buffer.concat([data, Buffer.alloc(padding)]) : data,\n        addr,\n      );\n    } else {\n      await this.transport.send(data, addr);\n    }\n  }\n\n  private async createPermission(peerAddress: Address) {\n    const request = new Message(methods.CREATE_PERMISSION, classes.REQUEST);\n    request\n      .setAttribute(\"XOR-PEER-ADDRESS\", peerAddress)\n      .setAttribute(\"USERNAME\", this.username)\n      .setAttribute(\"REALM\", this.realm)\n      .setAttribute(\"NONCE\", this.nonce);\n    await this.request(request, this.server).catch((e) => {\n      request;\n      throw e;\n    });\n  }\n\n  private refresh = (exp: number) =>\n    new PCancelable(async (_, f, onCancel) => {\n      let run = true;\n      onCancel(() => {\n        run = false;\n        f(\"cancel\");\n      });\n\n      while (run) {\n        // refresh before expire\n        const delay = (5 / 6) * exp * 1000;\n        log(\"refresh delay\", delay, { exp });\n        await setTimeout(delay);\n\n        const request = new Message(methods.REFRESH, classes.REQUEST);\n        request.setAttribute(\"LIFETIME\", exp);\n\n        try {\n          const [message] = await this.requestWithRetry(request, this.server);\n          exp = message.getAttributeValue(\"LIFETIME\");\n          log(\"refresh\", { exp });\n        } catch (error) {\n          log(\"refresh error\", error);\n        }\n      }\n    });\n\n  async request(request: Message, addr: Address): Promise<[Message, Address]> {\n    if (this.transactions[request.transactionIdHex]) {\n      throw new Error(\"exist\");\n    }\n    if (this.integrityKey) {\n      request\n        .setAttribute(\"USERNAME\", this.username)\n        .setAttribute(\"REALM\", this.realm)\n        .setAttribute(\"NONCE\", this.nonce)\n        .addMessageIntegrity(this.integrityKey)\n        .addFingerprint();\n    }\n\n    const transaction = new Transaction(request, addr, this);\n    this.transactions[request.transactionIdHex] = transaction;\n\n    try {\n      return await transaction.run();\n    } catch (e) {\n      throw e;\n    } finally {\n      delete this.transactions[request.transactionIdHex];\n    }\n  }\n\n  async requestWithRetry(\n    request: Message,\n    addr: Address,\n  ): Promise<[Message, Address]> {\n    let message: Message, address: Address;\n    try {\n      [message, address] = await this.request(request, addr);\n    } catch (error) {\n      if (error instanceof TransactionFailed == false) {\n        log(\"requestWithRetry error\", error);\n        throw error;\n      }\n\n      // resolve dns address\n      this.server = error.addr;\n\n      const [errorCode] = error.response.getAttributeValue(\"ERROR-CODE\");\n      const nonce = error.response.getAttributeValue(\"NONCE\");\n      const realm = error.response.getAttributeValue(\"REALM\");\n\n      if (\n        ((errorCode === 401 && realm) || (errorCode === 438 && this.realm)) &&\n        nonce\n      ) {\n        log(\"retry with nonce\", errorCode);\n\n        this.nonce = nonce;\n        if (errorCode === 401) {\n          this.realm = realm;\n        }\n        this.integrityKey = makeIntegrityKey(\n          this.username,\n          this.realm!,\n          this.password,\n        );\n\n        request.transactionId = randomTransactionId();\n        [message, address] = await this.request(request, this.server);\n      } else {\n        throw error;\n      }\n    }\n    return [message!, address!];\n  }\n\n  async sendData(data: Buffer, addr: Address) {\n    const channel = await this.getChannel(addr).catch((e) => {\n      return new Error(\"channelBind error\");\n    });\n\n    if (channel instanceof Error) {\n      await this.getPermission(addr);\n      const indicate = new Message(methods.SEND, classes.INDICATION)\n        .setAttribute(\"DATA\", data)\n        .setAttribute(\"XOR-PEER-ADDRESS\", addr);\n\n      await this.sendStun(indicate, this.server);\n      return;\n    }\n\n    const header = jspack.Pack(\"!HH\", [channel.number, data.length]);\n    await this.send(Buffer.concat([Buffer.from(header), data]), this.server);\n  }\n\n  async getPermission(addr: Address) {\n    await this.creatingPermission;\n\n    const permitted = this.permissionByAddr[addr.join(\":\")];\n    if (!permitted) {\n      this.creatingPermission = this.createPermission(addr);\n      this.permissionByAddr[addr.join(\":\")] = true;\n      await this.creatingPermission.catch((e) => {\n        log(\"createPermission error\", e);\n        throw e;\n      });\n    }\n  }\n\n  async getChannel(addr: Address) {\n    if (this.channelBinding) {\n      await this.channelBinding;\n    }\n\n    let channel = this.channelByAddr[addr.join(\":\")];\n\n    if (!channel) {\n      this.channelByAddr[addr.join(\":\")] = {\n        number: this.channelNumber++,\n        address: addr,\n      };\n      channel = this.channelByAddr[addr.join(\":\")];\n      this.addrByChannel[channel.number] = addr;\n\n      this.channelBinding = this.channelBind(channel.number, addr);\n      await this.channelBinding.catch((e) => {\n        log(\"channelBind error\", e);\n        throw e;\n      });\n      this.channelRefreshAt = int(Date.now() / 1000) + this.channelRefreshTime;\n      this.channelBinding = undefined;\n      log(\"channelBind\", channel);\n    } else if (this.channelRefreshAt < int(Date.now() / 1000)) {\n      this.channelBinding = this.channelBind(channel.number, addr);\n      this.channelRefreshAt = int(Date.now() / 1000) + this.channelRefreshTime;\n      await this.channelBinding.catch((e) => {\n        log(\"channelBind error\", e);\n        throw e;\n      });\n      this.channelBinding = undefined;\n      log(\"channelBind refresh\", channel);\n    }\n    return channel;\n  }\n\n  private async channelBind(channelNumber: number, addr: Address) {\n    const request = new Message(methods.CHANNEL_BIND, classes.REQUEST);\n    request\n      .setAttribute(\"CHANNEL-NUMBER\", channelNumber)\n      .setAttribute(\"XOR-PEER-ADDRESS\", addr);\n    const [response] = await this.requestWithRetry(request, this.server);\n    if (response.messageMethod !== methods.CHANNEL_BIND) {\n      throw new Error(\"should be CHANNEL_BIND\");\n    }\n  }\n\n  async sendStun(message: Message, addr: Address) {\n    await this.send(message.bytes, addr);\n  }\n\n  async close() {\n    this.refreshHandle?.cancel();\n    await this.transport.close();\n  }\n}\n\nexport interface TurnClientConfig {\n  address: Address;\n  username: string;\n  password: string;\n}\nexport interface TurnClientOptions {\n  lifetime?: number;\n  ssl?: boolean;\n  transport?: \"udp\" | \"tcp\";\n  portRange?: [number, number];\n  interfaceAddresses?: InterfaceAddresses;\n}\n\nexport async function createTurnClient(\n  { address, username, password }: TurnClientConfig,\n  {\n    lifetime,\n    portRange,\n    interfaceAddresses,\n    transport: transportType,\n  }: TurnClientOptions = {},\n) {\n  lifetime ??= DEFAULT_ALLOCATION_LIFETIME;\n  transportType ??= \"udp\";\n\n  const transport =\n    transportType === \"udp\"\n      ? await UdpTransport.init(\"udp4\", portRange, interfaceAddresses)\n      : await TcpTransport.init(address);\n\n  const turn = new TurnProtocol(\n    address,\n    username,\n    password,\n    lifetime,\n    transport,\n  );\n\n  await turn.connectionMade();\n  return turn;\n}\n\nexport async function createStunOverTurnClient(\n  {\n    address,\n    username,\n    password,\n    ice,\n  }: {\n    address: Address;\n    username: string;\n    password: string;\n    ice: Connection;\n  },\n  {\n    lifetime,\n    portRange,\n    interfaceAddresses,\n    transport: transportType,\n  }: {\n    lifetime?: number;\n    ssl?: boolean;\n    transport?: \"udp\" | \"tcp\";\n    portRange?: [number, number];\n    interfaceAddresses?: InterfaceAddresses;\n  } = {},\n) {\n  const turn = await createTurnClient(\n    {\n      address,\n      username,\n      password,\n    },\n    {\n      lifetime,\n      portRange,\n      interfaceAddresses,\n      transport: transportType,\n    },\n  );\n  const turnTransport = new StunOverTurnProtocol(turn, ice);\n  return turnTransport;\n}\n\nexport function makeIntegrityKey(\n  username: string,\n  realm: string,\n  password: string,\n) {\n  return createHash(\"md5\")\n    .update(Buffer.from([username, realm, password].join(\":\")))\n    .digest();\n}\n\nfunction isChannelData(data: Buffer) {\n  return (data[0] & 0xc0) == 0x40;\n}\n"]}