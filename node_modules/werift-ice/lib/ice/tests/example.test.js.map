{"version":3,"file":"example.test.js","sourceRoot":"","sources":["../../../tests/example.test.ts"],"names":[],"mappings":";;AAAA,gCAAoC;AAEpC,IAAI,CAAC,SAAS,EAAE,KAAK,IAAI,EAAE;IACzB,MAAM,CAAC,GAAG,IAAI,gBAAU,CAAC,IAAI,EAAE;QAC7B,UAAU,EAAE,CAAC,mBAAmB,EAAE,KAAK,CAAC;KACzC,CAAC,CAAC;IACH,MAAM,CAAC,GAAG,IAAI,gBAAU,CAAC,KAAK,EAAE;QAC9B,UAAU,EAAE,CAAC,mBAAmB,EAAE,KAAK,CAAC;KACzC,CAAC,CAAC;IAEH,WAAW;IACX,MAAM,CAAC,CAAC,gBAAgB,EAAE,CAAC;IAC3B,CAAC,CAAC,gBAAgB,GAAG,CAAC,CAAC,eAAe,CAAC;IACvC,CAAC,CAAC,cAAc,GAAG,CAAC,CAAC,aAAa,CAAC;IACnC,CAAC,CAAC,cAAc,GAAG,CAAC,CAAC,aAAa,CAAC;IAEnC,WAAW;IACX,MAAM,CAAC,CAAC,gBAAgB,EAAE,CAAC;IAC3B,CAAC,CAAC,gBAAgB,GAAG,CAAC,CAAC,eAAe,CAAC;IACvC,CAAC,CAAC,cAAc,GAAG,CAAC,CAAC,aAAa,CAAC;IACnC,CAAC,CAAC,cAAc,GAAG,CAAC,CAAC,aAAa,CAAC;IAEnC,YAAY;IACZ,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;IAE9C,qBAAqB;IACrB,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;IACpC,IAAI,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC;IACxC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAEvC,qBAAqB;IACrB,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;IACpC,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC;IACpC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAEvC,MAAM,CAAC,CAAC,KAAK,EAAE,CAAC;IAChB,MAAM,CAAC,CAAC,KAAK,EAAE,CAAC;AAClB,CAAC,CAAC,CAAC","sourcesContent":["import { Connection } from \"../src\";\n\ntest(\"example\", async () => {\n  const a = new Connection(true, {\n    stunServer: [\"stun.l.google.com\", 19302],\n  });\n  const b = new Connection(false, {\n    stunServer: [\"stun.l.google.com\", 19302],\n  });\n\n  // # invite\n  await a.gatherCandidates();\n  b.remoteCandidates = a.localCandidates;\n  b.remoteUsername = a.localUserName;\n  b.remotePassword = a.localPassword;\n\n  // # accept\n  await b.gatherCandidates();\n  a.remoteCandidates = b.localCandidates;\n  a.remoteUsername = b.localUserName;\n  a.remotePassword = b.localPassword;\n\n  // # connect\n  await Promise.all([a.connect(), b.connect()]);\n\n  // # send data a -> b\n  await a.send(Buffer.from(\"howdee\"));\n  let [data] = await b.onData.asPromise();\n  expect(data.toString()).toBe(\"howdee\");\n\n  // # send data b -> a\n  await b.send(Buffer.from(\"gotcha\"));\n  [data] = await a.onData.asPromise();\n  expect(data.toString()).toBe(\"gotcha\");\n\n  await a.close();\n  await b.close();\n});\n"]}