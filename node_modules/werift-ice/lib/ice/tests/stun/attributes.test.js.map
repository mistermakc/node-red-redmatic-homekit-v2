{"version":3,"file":"attributes.test.js","sourceRoot":"","sources":["../../../../tests/stun/attributes.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  packErrorCode,\n  packXorAddress,\n  unpackErrorCode,\n  unpackXorAddress,\n} from \"../../src/stun/attributes\";\n\ndescribe(\"stun\", () => {\n  test(\"test_unpack_error_code\", () => {\n    const data = Buffer.from(\"00000457526f6c6520436f6e666c696374\", \"hex\");\n    const [code, reason] = unpackErrorCode(data);\n    expect(code).toBe(487);\n    expect(reason).toBe(\"Role Conflict\");\n  });\n\n  test(\"test_unpack_error_code_too_short\", () => {\n    const data = Buffer.from(\"000004\", \"hex\");\n    try {\n      unpackErrorCode(data);\n    } catch (error) {\n      expect((error as Error).message).toBe(\n        \"STUN error code is less than 4 bytes\",\n      );\n    }\n  });\n\n  test(\"test_unpack_xor_address_ipv4\", () => {\n    const transactionId = Buffer.from(\"b7e7a701bc34d686fa87dfae\", \"hex\");\n    const [address, port] = unpackXorAddress(\n      Buffer.from(\"0001a147e112a643\", \"hex\"),\n      transactionId,\n    );\n    expect(address).toBe(\"192.0.2.1\");\n    expect(port).toBe(32853);\n  });\n\n  test(\"test_unpack_xor_address_ipv4_truncated\", () => {\n    const transactionId = Buffer.from(\"b7e7a701bc34d686fa87dfae\", \"hex\");\n    try {\n      unpackXorAddress(Buffer.from(\"0001a147e112a6\", \"hex\"), transactionId);\n    } catch (error) {\n      expect((error as Error).message).toBe(\n        \"STUN address has invalid length for IPv4\",\n      );\n    }\n  });\n\n  test(\"test_unpack_xor_address_ipv6\", () => {\n    const transactionId = Buffer.from(\"b7e7a701bc34d686fa87dfae\", \"hex\");\n    const [address, port] = unpackXorAddress(\n      Buffer.from(\"0002a1470113a9faa5d3f179bc25f4b5bed2b9d9\", \"hex\"),\n      transactionId,\n    );\n    expect(address).toBe(\"2001:db8:1234:5678:11:2233:4455:6677\");\n    expect(port).toBe(32853);\n  });\n\n  test(\"test_unpack_xor_address_ipv6_truncated\", () => {\n    const transactionId = Buffer.from(\"b7e7a701bc34d686fa87dfae\", \"hex\");\n    try {\n      unpackXorAddress(\n        Buffer.from(\"0002a1470113a9faa5d3f179bc25f4b5bed2b9\", \"hex\"),\n        transactionId,\n      );\n    } catch (error) {\n      expect((error as Error).message).toBe(\n        \"STUN address has invalid length for IPv6\",\n      );\n    }\n  });\n\n  test(\"test_unpack_xor_address_too_short\", () => {\n    const transactionId = Buffer.from(\"b7e7a701bc34d686fa87dfae\", \"hex\");\n    try {\n      unpackXorAddress(Buffer.from(\"0001\", \"hex\"), transactionId);\n    } catch (error) {\n      expect((error as Error).message).toBe(\n        \"STUN address length is less than 4 bytes\",\n      );\n    }\n  });\n\n  test(\"test_unpack_xor_address_unknown_protocol\", () => {\n    const transactionId = Buffer.from(\"b7e7a701bc34d686fa87dfae\", \"hex\");\n    try {\n      unpackXorAddress(Buffer.from(\"0003a147e112a643\", \"hex\"), transactionId);\n    } catch (error) {\n      expect((error as Error).message).toBe(\n        \"STUN address has unknown protocol\",\n      );\n    }\n  });\n\n  test(\"test_pack_error_code\", () => {\n    const data = packErrorCode([487, \"Role Conflict\"]);\n    expect(data).toEqual(\n      Buffer.from(\"00000457526f6c6520436f6e666c696374\", \"hex\"),\n    );\n  });\n\n  test(\"test_pack_xor_address_ipv4\", () => {\n    const transactionId = Buffer.from(\"b7e7a701bc34d686fa87dfae\", \"hex\");\n    const data = packXorAddress([\"192.0.2.1\", 32853], transactionId);\n    expect(data).toEqual(Buffer.from(\"0001a147e112a643\", \"hex\"));\n  });\n\n  test(\"test_pack_xor_address_ipv6\", () => {\n    const transactionId = Buffer.from(\"b7e7a701bc34d686fa87dfae\", \"hex\");\n    const data = packXorAddress(\n      [\"2001:db8:1234:5678:11:2233:4455:6677\", 32853],\n      transactionId,\n    );\n    expect(data).toEqual(\n      Buffer.from(\"0002a1470113a9faa5d3f179bc25f4b5bed2b9d9\", \"hex\"),\n    );\n  });\n});\n"]}