"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deepMerge = exports.MediaStreamTrackFactory = exports.createSelfSignedCertificate = exports.parseIceServers = exports.compactNtp = exports.ntpTime = exports.timestampSeconds = exports.milliTime = exports.microTime = exports.reverseDirection = exports.andDirection = exports.reverseSimulcastDirection = exports.isDtls = exports.fingerprint = void 0;
/* eslint-disable prefer-const */
const crypto_1 = require("crypto");
const dgram_1 = require("dgram");
const debug_1 = __importDefault(require("debug"));
const mergeWith_1 = __importDefault(require("lodash/mergeWith"));
const perf_hooks_1 = require("perf_hooks");
const src_1 = require("../../common/src");
const cipher_1 = require("../../dtls/src/context/cipher");
const rtpTransceiver_1 = require("./media/rtpTransceiver");
const track_1 = require("./media/track");
const now = require("nano-time");
const log = (0, debug_1.default)("werift:packages/webrtc/src/utils.ts");
function fingerprint(file, hashName) {
    const upper = (s) => s.toUpperCase();
    const colon = (s) => s.match(/(.{2})/g).join(":");
    const hash = (0, crypto_1.createHash)(hashName).update(file).digest("hex");
    return colon(upper(hash));
}
exports.fingerprint = fingerprint;
function isDtls(buf) {
    const firstByte = buf[0];
    return firstByte > 19 && firstByte < 64;
}
exports.isDtls = isDtls;
function reverseSimulcastDirection(dir) {
    if (dir === "recv")
        return "send";
    return "recv";
}
exports.reverseSimulcastDirection = reverseSimulcastDirection;
const andDirection = (a, b) => rtpTransceiver_1.Directions[rtpTransceiver_1.Directions.indexOf(a) & rtpTransceiver_1.Directions.indexOf(b)];
exports.andDirection = andDirection;
function reverseDirection(dir) {
    if (dir === "sendonly")
        return "recvonly";
    if (dir === "recvonly")
        return "sendonly";
    return dir;
}
exports.reverseDirection = reverseDirection;
const microTime = () => now.micro();
exports.microTime = microTime;
const milliTime = () => new Date().getTime();
exports.milliTime = milliTime;
const timestampSeconds = () => Date.now() / 1000;
exports.timestampSeconds = timestampSeconds;
/**https://datatracker.ietf.org/doc/html/rfc3550#section-4 */
const ntpTime = () => {
    const now = perf_hooks_1.performance.timeOrigin + perf_hooks_1.performance.now() - Date.UTC(1900, 0, 1);
    const seconds = now / 1000;
    const [sec, msec] = seconds.toString().split(".").map(Number);
    const buf = (0, src_1.bufferWriter)([4, 4], [sec, msec]);
    return buf.readBigUInt64BE();
};
exports.ntpTime = ntpTime;
/**
 * https://datatracker.ietf.org/doc/html/rfc3550#section-4
 * @param ntp
 * @returns 32bit
 */
const compactNtp = (ntp) => {
    const buf = (0, src_1.bufferWriter)([8], [ntp]);
    const [, sec, msec] = (0, src_1.bufferReader)(buf, [2, 2, 2, 2]);
    return (0, src_1.bufferWriter)([2, 2], [sec, msec]).readUInt32BE();
};
exports.compactNtp = compactNtp;
function parseIceServers(iceServers) {
    const url2Address = (url) => {
        if (!url)
            return;
        const [address, port] = url.split(":");
        return [address, parseInt(port)];
    };
    const stunServer = url2Address(iceServers.find(({ urls }) => urls.includes("stun:"))?.urls.slice(5));
    const turnServer = url2Address(iceServers.find(({ urls }) => urls.includes("turn:"))?.urls.slice(5));
    const { credential, username } = iceServers.find(({ urls }) => urls.includes("turn:")) || {};
    const options = {
        stunServer,
        turnServer,
        turnUsername: username,
        turnPassword: credential,
    };
    log("iceOptions", options);
    return options;
}
exports.parseIceServers = parseIceServers;
/**
 *
 * @param signatureHash
 * @param namedCurveAlgorithm necessary when use ecdsa
 */
exports.createSelfSignedCertificate = cipher_1.CipherContext.createSelfSignedCertificateWithKey;
class MediaStreamTrackFactory {
    static async rtpSource({ port, kind, cb, }) {
        port ?? (port = await (0, src_1.randomPort)());
        const track = new track_1.MediaStreamTrack({ kind });
        const udp = (0, dgram_1.createSocket)("udp4");
        udp.bind(port);
        const onMessage = (msg) => {
            if (cb) {
                msg = cb(msg);
            }
            track.writeRtp(msg);
        };
        udp.addListener("message", onMessage);
        const dispose = () => {
            udp.removeListener("message", onMessage);
            udp.close();
        };
        return [track, port, dispose];
    }
}
exports.MediaStreamTrackFactory = MediaStreamTrackFactory;
const deepMerge = (dst, src) => (0, mergeWith_1.default)(dst, src, (obj, src) => {
    if (!(src == undefined)) {
        return src;
    }
    return obj;
});
exports.deepMerge = deepMerge;
//# sourceMappingURL=utils.js.map