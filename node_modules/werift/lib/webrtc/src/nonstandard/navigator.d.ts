/// <reference types="react" />
/// <reference types="node" />
import { MediaStream, MediaStreamTrack } from "../media/track";
export declare class Navigator {
    mediaDevices: MediaDevices;
    constructor(props?: ConstructorParameters<typeof MediaDevices>[0]);
}
export declare class MediaDevices extends EventTarget {
    video?: MediaStreamTrack;
    audio?: MediaStreamTrack;
    constructor(props: {
        video?: MediaStreamTrack;
        audio?: MediaStreamTrack;
    });
    readonly getUserMedia: (constraints: MediaStreamConstraints) => Promise<MediaStream>;
    readonly getDisplayMedia: (constraints: MediaStreamConstraints) => Promise<MediaStream>;
}
interface MediaStreamConstraints {
    audio?: boolean | MediaTrackConstraints;
    peerIdentity?: string;
    preferCurrentTab?: boolean;
    video?: boolean | MediaTrackConstraints;
}
interface MediaTrackConstraints extends MediaTrackConstraintSet {
    advanced?: MediaTrackConstraintSet[];
}
interface MediaTrackConstraintSet {
    aspectRatio?: ConstrainDouble;
    autoGainControl?: ConstrainBoolean;
    channelCount?: ConstrainULong;
    deviceId?: ConstrainDOMString;
    displaySurface?: ConstrainDOMString;
    echoCancellation?: ConstrainBoolean;
    facingMode?: ConstrainDOMString;
    frameRate?: ConstrainDouble;
    groupId?: ConstrainDOMString;
    height?: ConstrainULong;
    noiseSuppression?: ConstrainBoolean;
    sampleRate?: ConstrainULong;
    sampleSize?: ConstrainULong;
    width?: ConstrainULong;
}
type ConstrainDOMString = string | string[] | ConstrainDOMStringParameters;
interface ConstrainDOMStringParameters {
    exact?: string | string[];
    ideal?: string | string[];
}
type ConstrainBoolean = boolean | ConstrainBooleanParameters;
interface ConstrainBooleanParameters {
    exact?: boolean;
    ideal?: boolean;
}
type ConstrainULong = number | ConstrainULongRange;
interface ConstrainULongRange extends ULongRange {
    exact?: number;
    ideal?: number;
}
interface ULongRange {
    max?: number;
    min?: number;
}
type ConstrainDouble = number | ConstrainDoubleRange;
interface ConstrainDoubleRange extends DoubleRange {
    exact?: number;
    ideal?: number;
}
interface DoubleRange {
    max?: number;
    min?: number;
}
export {};
