"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MediaDevices = exports.Navigator = void 0;
const crypto_1 = require("crypto");
const jspack_1 = require("@shinyoshiaki/jspack");
const track_1 = require("../media/track");
class Navigator {
    constructor(props = {}) {
        Object.defineProperty(this, "mediaDevices", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.mediaDevices = new MediaDevices(props);
    }
}
exports.Navigator = Navigator;
class MediaDevices extends EventTarget {
    constructor(props) {
        super();
        Object.defineProperty(this, "video", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "audio", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "getUserMedia", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (constraints) => {
                const video = constraints.video
                    ? new track_1.MediaStreamTrack({ kind: "video" })
                    : undefined;
                if (video) {
                    this.video?.onReceiveRtp.subscribe((rtp) => {
                        const cloned = rtp.clone();
                        cloned.header.ssrc = jspack_1.jspack.Unpack("!L", (0, crypto_1.randomBytes)(4))[0];
                        video.onReceiveRtp.execute(cloned);
                    });
                }
                const audio = constraints.audio
                    ? new track_1.MediaStreamTrack({ kind: "audio" })
                    : undefined;
                if (audio) {
                    this.audio?.onReceiveRtp.subscribe((rtp) => {
                        const cloned = rtp.clone();
                        cloned.header.ssrc = jspack_1.jspack.Unpack("!L", (0, crypto_1.randomBytes)(4))[0];
                        audio.onReceiveRtp.execute(cloned);
                    });
                }
                if (constraints.video && constraints.audio) {
                    return new track_1.MediaStream([video, audio]);
                }
                else if (constraints.audio) {
                    return new track_1.MediaStream([audio]);
                }
                else if (constraints.video) {
                    return new track_1.MediaStream([video]);
                }
                throw new Error("Not implemented");
            }
        });
        Object.defineProperty(this, "getDisplayMedia", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.getUserMedia
        });
        this.video = props.video;
        this.audio = props.audio;
    }
}
exports.MediaDevices = MediaDevices;
//# sourceMappingURL=navigator.js.map