{"version":3,"file":"rtpSender.js","sourceRoot":"","sources":["../../../../src/media/rtpSender.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n   [10 Nov 1995 11:33:25.125 UTC]       [10 Nov 1995 11:33:36.5 UTC]\n   n                 SR(n)              A=b710:8000 (46864.500 s)\n   ---------------------------------------------------------------->\n                      v                 ^\n   ntp_sec =0xb44db705 v               ^ dlsr=0x0005:4000 (    5.250s)\n   ntp_frac=0x20000000  v             ^  lsr =0xb705:2000 (46853.125s)\n     (3024992005.125 s)  v           ^\n   r                      v         ^ RR(n)\n   ---------------------------------------------------------------->\n                          |<-DLSR->|\n                           (5.250 s)\n        \n   A     0xb710:8000 (46864.500 s)\n   DLSR -0x0005:4000 (    5.250 s)\n   LSR  -0xb705:2000 (46853.125 s)\n   -------------------------------\n   delay 0x0006:2000 (    6.125 s)\n        \nFigure 2: Example for round-trip time computation\n */\n\nimport { randomBytes } from \"crypto\";\nimport { jspack } from \"@shinyoshiaki/jspack\";\nimport debug from \"debug\";\nimport Event from \"rx.mini\";\nimport { setTimeout } from \"timers/promises\";\nimport * as uuid from \"uuid\";\n\nimport { codecParametersFromString } from \"..\";\nimport { random16, uint16Add, uint32Add } from \"../../../common/src\";\nimport {\n  Extension,\n  GenericNack,\n  PictureLossIndication,\n  RTP_EXTENSION_URI,\n  ReceiverEstimatedMaxBitrate,\n  RedEncoder,\n  RtcpPacket,\n  RtcpPayloadSpecificFeedback,\n  RtcpRrPacket,\n  RtcpSenderInfo,\n  RtcpSourceDescriptionPacket,\n  RtcpSrPacket,\n  RtcpTransportLayerFeedback,\n  RtpHeader,\n  RtpPacket,\n  SourceDescriptionChunk,\n  SourceDescriptionItem,\n  TransportWideCC,\n  serializeAbsSendTime,\n  serializeRepairedRtpStreamId,\n  serializeSdesMid,\n  serializeSdesRTPStreamID,\n  serializeTransportWideCC,\n  wrapRtx,\n} from \"../../../rtp/src\";\nimport { RTCDtlsTransport } from \"../transport/dtls\";\nimport { Kind } from \"../types/domain\";\nimport { compactNtp, milliTime, ntpTime, timestampSeconds } from \"../utils\";\nimport {\n  RTCRtpCodecParameters,\n  RTCRtpHeaderExtensionParameters,\n  RTCRtpSendParameters,\n} from \"./parameters\";\nimport { SenderBandwidthEstimator, SentInfo } from \"./sender/senderBWE\";\nimport { MediaStreamTrack } from \"./track\";\n\nconst log = debug(\"werift:packages/webrtc/src/media/rtpSender.ts\");\n\nconst RTP_HISTORY_SIZE = 128;\nconst RTT_ALPHA = 0.85;\n\nexport class RTCRtpSender {\n  readonly type = \"sender\";\n  readonly kind: Kind;\n  readonly ssrc = jspack.Unpack(\"!L\", randomBytes(4))[0];\n  readonly rtxSsrc = jspack.Unpack(\"!L\", randomBytes(4))[0];\n  streamId = uuid.v4();\n  readonly trackId = uuid.v4();\n  readonly onReady = new Event();\n  readonly onRtcp = new Event<[RtcpPacket]>();\n  readonly onPictureLossIndication = new Event<[]>();\n  readonly onGenericNack = new Event<[GenericNack]>();\n  readonly senderBWE = new SenderBandwidthEstimator();\n\n  private cname?: string;\n  private mid?: string;\n  private rtpStreamId?: string;\n  private repairedRtpStreamId?: string;\n  private rtxPayloadType?: number;\n  private rtxSequenceNumber = random16();\n  redRedundantPayloadType?: number;\n  private _redDistance = 2;\n  redEncoder = new RedEncoder(this._redDistance);\n  private headerExtensions: RTCRtpHeaderExtensionParameters[] = [];\n  private disposeTrack?: () => void;\n\n  // # stats\n  private lastSRtimestamp?: number;\n  private lastSentSRTimestamp?: number;\n  private ntpTimestamp = 0n;\n  private rtpTimestamp = 0;\n  private octetCount = 0;\n  private packetCount = 0;\n  private rtt?: number;\n  receiverEstimatedMaxBitrate = 0n;\n\n  // rtp\n  private sequenceNumber?: number;\n  private timestamp?: number;\n  private timestampOffset = 0;\n  private seqOffset = 0;\n  private rtpCache: RtpPacket[] = [];\n  codec?: RTCRtpCodecParameters;\n  public dtlsTransport!: RTCDtlsTransport;\n  private dtlsDisposer: (() => void)[] = [];\n\n  track?: MediaStreamTrack;\n  stopped = false;\n  rtcpRunning = false;\n  private rtcpCancel = new AbortController();\n\n  constructor(public trackOrKind: Kind | MediaStreamTrack) {\n    this.kind =\n      typeof this.trackOrKind === \"string\"\n        ? this.trackOrKind\n        : this.trackOrKind.kind;\n    if (typeof trackOrKind !== \"string\") {\n      if (trackOrKind.streamId) {\n        this.streamId = trackOrKind.streamId;\n      }\n      this.registerTrack(trackOrKind);\n    }\n  }\n\n  setDtlsTransport(dtlsTransport: RTCDtlsTransport) {\n    if (this.dtlsTransport) {\n      this.dtlsDisposer.forEach((dispose) => dispose());\n    }\n\n    this.dtlsTransport = dtlsTransport;\n    this.dtlsDisposer = [\n      this.dtlsTransport.onStateChange.subscribe((state) => {\n        if (state === \"connected\") {\n          this.onReady.execute();\n        }\n      }).unSubscribe,\n    ];\n  }\n\n  get redDistance() {\n    return this._redDistance;\n  }\n  set redDistance(n: number) {\n    this._redDistance = n;\n    this.redEncoder.distance = n;\n  }\n\n  prepareSend(params: RTCRtpSendParameters) {\n    this.cname = params.rtcp?.cname;\n    this.mid = params.muxId;\n    this.headerExtensions = params.headerExtensions;\n    this.rtpStreamId = params.rtpStreamId;\n    this.repairedRtpStreamId = params.repairedRtpStreamId;\n\n    this.codec = params.codecs[0];\n    if (this.track) {\n      this.track.codec = this.codec;\n    }\n\n    params.codecs.forEach((codec) => {\n      const codecParams = codecParametersFromString(codec.parameters ?? \"\");\n      if (\n        codec.name.toLowerCase() === \"rtx\" &&\n        codecParams[\"apt\"] === this.codec?.payloadType\n      ) {\n        this.rtxPayloadType = codec.payloadType;\n      }\n      if (codec.name.toLowerCase() === \"red\") {\n        this.redRedundantPayloadType = Number(\n          (codec.parameters ?? \"\").split(\"/\")[0],\n        );\n      }\n    });\n  }\n\n  registerTrack(track: MediaStreamTrack) {\n    if (track.stopped) throw new Error(\"track is ended\");\n\n    if (this.disposeTrack) {\n      this.disposeTrack();\n    }\n\n    track.id = this.trackId;\n\n    const { unSubscribe } = track.onReceiveRtp.subscribe(async (rtp) => {\n      await this.sendRtp(rtp);\n    });\n    this.track = track;\n    this.disposeTrack = unSubscribe;\n\n    if (this.codec) {\n      track.codec = this.codec;\n    }\n\n    track.onSourceChanged.subscribe((header) => {\n      this.replaceRTP(header);\n    });\n  }\n\n  async replaceTrack(track: MediaStreamTrack | null) {\n    if (track === null) {\n      // todo impl\n      return;\n    }\n\n    if (track.stopped) throw new Error(\"track is ended\");\n\n    if (this.sequenceNumber != undefined) {\n      const header =\n        track.header || (await track.onReceiveRtp.asPromise())[0].header;\n\n      this.replaceRTP(header);\n    }\n\n    this.registerTrack(track);\n    log(\"replaceTrack\", \"ssrc\", track.ssrc, \"rid\", track.rid);\n  }\n\n  stop() {\n    this.stopped = true;\n    this.rtcpRunning = false;\n    this.rtcpCancel.abort();\n    if (this.disposeTrack) {\n      this.disposeTrack();\n    }\n    this.track = undefined;\n  }\n\n  async runRtcp() {\n    if (this.rtcpRunning || this.stopped) return;\n    this.rtcpRunning = true;\n\n    try {\n      while (this.rtcpRunning) {\n        await setTimeout(500 + Math.random() * 1000, undefined, {\n          signal: this.rtcpCancel.signal,\n        });\n\n        const packets: RtcpPacket[] = [\n          new RtcpSrPacket({\n            ssrc: this.ssrc,\n            senderInfo: new RtcpSenderInfo({\n              ntpTimestamp: this.ntpTimestamp,\n              rtpTimestamp: this.rtpTimestamp,\n              packetCount: this.packetCount,\n              octetCount: this.octetCount,\n            }),\n          }),\n        ];\n        this.lastSRtimestamp = compactNtp(this.ntpTimestamp);\n        this.lastSentSRTimestamp = timestampSeconds();\n\n        if (this.cname) {\n          packets.push(\n            new RtcpSourceDescriptionPacket({\n              chunks: [\n                new SourceDescriptionChunk({\n                  source: this.ssrc,\n                  items: [\n                    new SourceDescriptionItem({ type: 1, text: this.cname }),\n                  ],\n                }),\n              ],\n            }),\n          );\n        }\n\n        try {\n          await this.dtlsTransport.sendRtcp(packets);\n        } catch (error) {\n          log(\"sendRtcp failed\", error);\n          await setTimeout(500 + Math.random() * 1000);\n        }\n      }\n    } catch (error) {}\n  }\n\n  replaceRTP(\n    {\n      sequenceNumber,\n      timestamp,\n    }: Pick<RtpHeader, \"sequenceNumber\" | \"timestamp\">,\n    discontinuity = false,\n  ) {\n    if (this.sequenceNumber != undefined) {\n      this.seqOffset = uint16Add(this.sequenceNumber, -sequenceNumber);\n      if (discontinuity) {\n        this.seqOffset = uint16Add(this.seqOffset, 2);\n      }\n    }\n    if (this.timestamp != undefined) {\n      this.timestampOffset = uint32Add(this.timestamp, -timestamp);\n      if (discontinuity) {\n        this.timestampOffset = uint16Add(this.timestampOffset, 1);\n      }\n    }\n    this.rtpCache = [];\n    log(\"replaceRTP\", this.sequenceNumber, sequenceNumber, this.seqOffset);\n  }\n\n  async sendRtp(rtp: Buffer | RtpPacket) {\n    if (this.dtlsTransport.state !== \"connected\" || !this.codec) {\n      return;\n    }\n\n    rtp = Buffer.isBuffer(rtp) ? RtpPacket.deSerialize(rtp) : rtp;\n\n    const { header, payload } = rtp;\n    header.ssrc = this.ssrc;\n    header.payloadType = this.codec.payloadType;\n    header.timestamp = uint32Add(header.timestamp, this.timestampOffset);\n    header.sequenceNumber = uint16Add(header.sequenceNumber, this.seqOffset);\n    this.timestamp = header.timestamp;\n    this.sequenceNumber = header.sequenceNumber;\n\n    const ntpTimestamp = ntpTime();\n\n    const originalHeaderExtensions = [...header.extensions];\n    header.extensions = this.headerExtensions\n      .map((extension) => {\n        const payload = (() => {\n          switch (extension.uri) {\n            case RTP_EXTENSION_URI.sdesMid:\n              if (this.mid) {\n                return serializeSdesMid(this.mid);\n              }\n              return;\n            // todo : sender simulcast unsupported now\n            case RTP_EXTENSION_URI.sdesRTPStreamID:\n              if (this.rtpStreamId) {\n                return serializeSdesRTPStreamID(this.rtpStreamId);\n              }\n              return;\n            // todo : sender simulcast unsupported now\n            case RTP_EXTENSION_URI.repairedRtpStreamId:\n              if (this.repairedRtpStreamId) {\n                return serializeRepairedRtpStreamId(this.repairedRtpStreamId);\n              }\n              return;\n            case RTP_EXTENSION_URI.transportWideCC:\n              this.dtlsTransport.transportSequenceNumber = uint16Add(\n                this.dtlsTransport.transportSequenceNumber,\n                1,\n              );\n              return serializeTransportWideCC(\n                this.dtlsTransport.transportSequenceNumber,\n              );\n            case RTP_EXTENSION_URI.absSendTime:\n              return serializeAbsSendTime(ntpTimestamp);\n          }\n        })();\n\n        if (payload) return { id: extension.id, payload };\n      })\n      .filter((v) => v) as Extension[];\n    for (const ext of originalHeaderExtensions) {\n      const exist = header.extensions.find((v) => v.id === ext.id);\n      if (exist) {\n        exist.payload = ext.payload;\n      } else {\n        header.extensions.push(ext);\n      }\n    }\n    header.extensions = header.extensions.sort((a, b) => a.id - b.id);\n\n    this.ntpTimestamp = ntpTimestamp;\n    this.rtpTimestamp = header.timestamp;\n    this.octetCount += payload.length;\n    this.packetCount = uint32Add(this.packetCount, 1);\n\n    this.rtpCache[header.sequenceNumber % RTP_HISTORY_SIZE] = rtp;\n\n    let rtpPayload = payload;\n\n    if (this.redRedundantPayloadType) {\n      this.redEncoder.push({\n        block: rtpPayload,\n        timestamp: header.timestamp,\n        blockPT: this.redRedundantPayloadType,\n      });\n      const red = this.redEncoder.build();\n      rtpPayload = red.serialize();\n    }\n\n    const size = await this.dtlsTransport.sendRtp(rtpPayload, header);\n\n    this.runRtcp();\n    const millitime = milliTime();\n    const sentInfo: SentInfo = {\n      wideSeq: this.dtlsTransport.transportSequenceNumber,\n      size,\n      sendingAtMs: millitime,\n      sentAtMs: millitime,\n    };\n    this.senderBWE.rtpPacketSent(sentInfo);\n  }\n\n  handleRtcpPacket(rtcpPacket: RtcpPacket) {\n    switch (rtcpPacket.type) {\n      case RtcpSrPacket.type:\n      case RtcpRrPacket.type: {\n        const packet = rtcpPacket as RtcpSrPacket | RtcpRrPacket;\n        packet.reports\n          .filter((report) => report.ssrc === this.ssrc)\n          .forEach((report) => {\n            if (this.lastSRtimestamp === report.lsr && report.dlsr) {\n              if (this.lastSentSRTimestamp) {\n                const rtt =\n                  timestampSeconds() -\n                  this.lastSentSRTimestamp -\n                  report.dlsr / 65536;\n                if (this.rtt === undefined) {\n                  this.rtt = rtt;\n                } else {\n                  this.rtt = RTT_ALPHA * this.rtt + (1 - RTT_ALPHA) * rtt;\n                }\n              }\n            }\n          });\n      }\n      break;\n      case RtcpTransportLayerFeedback.type: {\n        const packet = rtcpPacket as RtcpTransportLayerFeedback;\n        switch (packet.feedback.count) {\n          case TransportWideCC.count: {\n            const feedback = packet.feedback as TransportWideCC;\n            this.senderBWE.receiveTWCC(feedback);\n          }\n          break;\n          case GenericNack.count: {\n            const feedback = packet.feedback as GenericNack;\n            feedback.lost.forEach(async (seqNum) => {\n              let packet: RtpPacket | undefined =\n                this.rtpCache[seqNum % RTP_HISTORY_SIZE];\n              if (packet && packet.header.sequenceNumber !== seqNum) {\n                packet = undefined;\n              }\n              if (packet) {\n                if (this.rtxPayloadType != undefined) {\n                  packet = wrapRtx(\n                    packet,\n                    this.rtxPayloadType,\n                    this.rtxSequenceNumber,\n                    this.rtxSsrc,\n                  );\n                  this.rtxSequenceNumber = uint16Add(this.rtxSequenceNumber, 1);\n                }\n                await this.dtlsTransport.sendRtp(packet.payload, packet.header);\n              }\n            });\n            this.onGenericNack.execute(feedback);\n          }\n          break;\n        }\n      }\n      break;\n      case RtcpPayloadSpecificFeedback.type: {\n        const packet = rtcpPacket as RtcpPayloadSpecificFeedback;\n        switch (packet.feedback.count) {\n          case ReceiverEstimatedMaxBitrate.count: {\n            const feedback = packet.feedback as ReceiverEstimatedMaxBitrate;\n            this.receiverEstimatedMaxBitrate = feedback.bitrate;\n          }\n          break;\n          case PictureLossIndication.count: {\n            this.onPictureLossIndication.execute();\n          }\n          break;\n        }\n      }\n      break;\n    }\n    this.onRtcp.execute(rtcpPacket);\n  }\n}\n"]}