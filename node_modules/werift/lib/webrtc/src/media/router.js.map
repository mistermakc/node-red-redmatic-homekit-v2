{"version":3,"file":"router.js","sourceRoot":"","sources":["../../../../src/media/router.ts"],"names":[],"mappings":"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","sourcesContent":["import debug from \"debug\";\n\nimport {\n  RTP_EXTENSION_URI,\n  ReceiverEstimatedMaxBitrate,\n  RtcpPacket,\n  RtcpPayloadSpecificFeedback,\n  RtcpRrPacket,\n  RtcpSourceDescriptionPacket,\n  RtcpSrPacket,\n  RtcpTransportLayerFeedback,\n  RtpPacket,\n  rtpHeaderExtensionsParser,\n} from \"../../../rtp/src\";\nimport {\n  RTCRtpReceiveParameters,\n  RTCRtpSimulcastParameters,\n} from \"./parameters\";\nimport { RTCRtpReceiver } from \"./rtpReceiver\";\nimport { RTCRtpSender } from \"./rtpSender\";\nimport { RTCRtpTransceiver } from \"./rtpTransceiver\";\nimport { MediaStreamTrack } from \"./track\";\n\nconst log = debug(\"werift:packages/webrtc/src/media/router.ts\");\n\nexport type Extensions = { [uri: string]: number | string };\n\nexport class RtpRouter {\n  ssrcTable: { [ssrc: number]: RTCRtpReceiver | RTCRtpSender } = {};\n  ridTable: { [rid: string]: RTCRtpReceiver | RTCRtpSender } = {};\n  extIdUriMap: { [id: number]: string } = {};\n\n  constructor() {}\n\n  registerRtpSender(sender: RTCRtpSender) {\n    this.ssrcTable[sender.ssrc] = sender;\n  }\n\n  private registerRtpReceiver(receiver: RTCRtpReceiver, ssrc: number) {\n    log(\"registerRtpReceiver\", ssrc);\n    this.ssrcTable[ssrc] = receiver;\n  }\n\n  registerRtpReceiverBySsrc(\n    transceiver: RTCRtpTransceiver,\n    params: RTCRtpReceiveParameters,\n  ) {\n    log(\"registerRtpReceiverBySsrc\", params);\n\n    params.encodings\n      .filter((e) => e.ssrc != undefined) // todo fix\n      .forEach((encode, i) => {\n        this.registerRtpReceiver(transceiver.receiver, encode.ssrc);\n        transceiver.addTrack(\n          new MediaStreamTrack({\n            ssrc: encode.ssrc,\n            kind: transceiver.kind,\n            id: transceiver.sender.trackId,\n            remote: true,\n            codec: params.codecs[i],\n          }),\n        );\n        if (encode.rtx) {\n          this.registerRtpReceiver(transceiver.receiver, encode.rtx.ssrc);\n        }\n      });\n\n    params.headerExtensions.forEach((extension) => {\n      this.extIdUriMap[extension.id] = extension.uri;\n    });\n  }\n\n  registerRtpReceiverByRid(\n    transceiver: RTCRtpTransceiver,\n    param: RTCRtpSimulcastParameters,\n    params: RTCRtpReceiveParameters,\n  ) {\n    // サイマルキャスト利用時のRTXをサポートしていないのでcodecs/encodingsは常に一つ\n    const [codec] = params.codecs;\n\n    log(\"registerRtpReceiverByRid\", param);\n    transceiver.addTrack(\n      new MediaStreamTrack({\n        rid: param.rid,\n        kind: transceiver.kind,\n        id: transceiver.sender.trackId,\n        remote: true,\n        codec,\n      }),\n    );\n    this.ridTable[param.rid] = transceiver.receiver;\n  }\n\n  routeRtp = (packet: RtpPacket) => {\n    const extensions = rtpHeaderExtensionsParser(\n      packet.header.extensions,\n      this.extIdUriMap,\n    );\n\n    let rtpReceiver: RTCRtpReceiver | undefined = this.ssrcTable[\n      packet.header.ssrc\n    ] as RTCRtpReceiver;\n\n    const rid = extensions[RTP_EXTENSION_URI.sdesRTPStreamID];\n    if (typeof rid === \"string\") {\n      rtpReceiver = this.ridTable[rid] as RTCRtpReceiver;\n      rtpReceiver.latestRid = rid;\n      rtpReceiver.handleRtpByRid(packet, rid, extensions);\n    } else if (rtpReceiver) {\n      rtpReceiver.handleRtpBySsrc(packet, extensions);\n    } else {\n      // simulcast after send receiver report\n      rtpReceiver = Object.values(this.ridTable)\n        .filter((r): r is RTCRtpReceiver => r instanceof RTCRtpReceiver)\n        .find((r) => r.trackBySSRC[packet.header.ssrc]);\n      if (rtpReceiver) {\n        log(\"simulcast register receiver by ssrc\", packet.header.ssrc);\n        this.registerRtpReceiver(rtpReceiver, packet.header.ssrc);\n        rtpReceiver.handleRtpBySsrc(packet, extensions);\n      } else {\n        // bug\n      }\n    }\n\n    if (!rtpReceiver) {\n      log(\"ssrcReceiver not found\");\n      return;\n    }\n\n    const sdesMid = extensions[RTP_EXTENSION_URI.sdesMid];\n    if (typeof sdesMid === \"string\") {\n      rtpReceiver.sdesMid = sdesMid;\n    }\n\n    const repairedRid = extensions[\n      RTP_EXTENSION_URI.repairedRtpStreamId\n    ] as string;\n    if (typeof repairedRid === \"string\") {\n      rtpReceiver.latestRepairedRid = repairedRid;\n    }\n  };\n\n  routeRtcp = (packet: RtcpPacket) => {\n    const recipients: (RTCRtpReceiver | RTCRtpSender)[] = [];\n\n    switch (packet.type) {\n      case RtcpSrPacket.type: {\n        packet = packet as RtcpSrPacket;\n        recipients.push(this.ssrcTable[packet.ssrc]);\n      }\n      break;\n      case RtcpRrPacket.type: {\n        packet = packet as RtcpRrPacket;\n        packet.reports.forEach((report) => {\n          recipients.push(this.ssrcTable[report.ssrc]);\n        });\n      }\n      break;\n      case RtcpSourceDescriptionPacket.type: {\n        const sdes = packet as RtcpSourceDescriptionPacket;\n        // log(\"sdes\", JSON.stringify(sdes.chunks));\n      }\n      break;\n      case RtcpTransportLayerFeedback.type: {\n        const rtpfb = packet as RtcpTransportLayerFeedback;\n        if (rtpfb.feedback) {\n          recipients.push(this.ssrcTable[rtpfb.feedback.mediaSourceSsrc]);\n        }\n      }\n      break;\n      case RtcpPayloadSpecificFeedback.type: {\n        const psfb = packet as RtcpPayloadSpecificFeedback;\n        switch (psfb.feedback.count) {\n          case ReceiverEstimatedMaxBitrate.count: {\n            const remb = psfb.feedback as ReceiverEstimatedMaxBitrate;\n            recipients.push(this.ssrcTable[remb.ssrcFeedbacks[0]]);\n          }\n          break;\n          default:\n            recipients.push(this.ssrcTable[psfb.feedback.senderSsrc]);\n        }\n      }\n      break;\n    }\n    recipients\n      .filter((v) => v) // todo simulcast\n      .forEach((recipient) => recipient.handleRtcpPacket(packet));\n  };\n}\n"]}