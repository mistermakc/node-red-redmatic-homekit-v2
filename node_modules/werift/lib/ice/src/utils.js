"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getHostAddresses = exports.normalizeFamilyNodeV18 = exports.getGlobalIp = void 0;
const os_1 = __importDefault(require("os"));
const nodeIp = __importStar(require("ip"));
const ice_1 = require("./ice");
const protocol_1 = require("./stun/protocol");
async function getGlobalIp(stunServer, interfaceAddresses) {
    const connection = new ice_1.Connection(true, {
        stunServer: stunServer ?? ["stun.l.google.com", 19302],
    });
    await connection.gatherCandidates();
    const protocol = new protocol_1.StunProtocol(connection);
    protocol.localCandidate = connection.localCandidates[0];
    await protocol.connectionMade(true, undefined, interfaceAddresses);
    const candidate = await (0, ice_1.serverReflexiveCandidate)(protocol, [
        "stun.l.google.com",
        19302,
    ]);
    await connection.close();
    await protocol.close();
    if (!candidate?.host) {
        throw new Error("host not exist");
    }
    return candidate?.host;
}
exports.getGlobalIp = getGlobalIp;
function normalizeFamilyNodeV18(family) {
    if (family === "IPv4")
        return 4;
    if (family === "IPv6")
        return 6;
    return family;
}
exports.normalizeFamilyNodeV18 = normalizeFamilyNodeV18;
function isAutoconfigurationAddress(info) {
    return (normalizeFamilyNodeV18(info.family) === 4 &&
        info.address?.startsWith("169.254."));
}
function nodeIpAddress(family) {
    // https://chromium.googlesource.com/external/webrtc/+/master/rtc_base/network.cc#236
    const costlyNetworks = ["ipsec", "tun", "utun", "tap"];
    const banNetworks = ["vmnet", "veth"];
    const interfaces = os_1.default.networkInterfaces();
    const all = Object.keys(interfaces)
        .map((nic) => {
        for (const word of [...costlyNetworks, ...banNetworks]) {
            if (nic.startsWith(word)) {
                return {
                    nic,
                    addresses: [],
                };
            }
        }
        const addresses = interfaces[nic].filter((details) => normalizeFamilyNodeV18(details.family) === family &&
            !nodeIp.isLoopback(details.address) &&
            !isAutoconfigurationAddress(details));
        return {
            nic,
            addresses: addresses.map((address) => address.address),
        };
    })
        .filter((address) => !!address);
    // os.networkInterfaces doesn't actually return addresses in a good order.
    // have seen instances where en0 (ethernet) is after en1 (wlan), etc.
    // eth0 > eth1
    all.sort((a, b) => a.nic.localeCompare(b.nic));
    return Object.values(all).flatMap((entry) => entry.addresses);
}
function getHostAddresses(useIpv4, useIpv6) {
    const address = [];
    if (useIpv4)
        address.push(...nodeIpAddress(4));
    if (useIpv6)
        address.push(...nodeIpAddress(6));
    return address;
}
exports.getHostAddresses = getHostAddresses;
//# sourceMappingURL=utils.js.map