{"version":3,"file":"protocol.js","sourceRoot":"","sources":["../../../../../ice/src/turn/protocol.ts"],"names":[],"mappings":"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","sourcesContent":["import { createHash } from \"crypto\";\nimport { jspack } from \"@shinyoshiaki/jspack\";\nimport debug from \"debug\";\nimport PCancelable from \"p-cancelable\";\nimport Event from \"rx.mini\";\nimport { setTimeout } from \"timers/promises\";\n\nimport { int } from \"../../../common/src\";\nimport type { InterfaceAddresses } from \"../../../common/src/network\";\nimport type { Candidate } from \"../candidate\";\nimport { TransactionFailed } from \"../exceptions\";\nimport { type Future, future, randomTransactionId } from \"../helper\";\nimport type { Connection } from \"../ice\";\nimport { classes, methods } from \"../stun/const\";\nimport { Message, parseMessage } from \"../stun/message\";\nimport { Transaction } from \"../stun/transaction\";\nimport { type Transport, UdpTransport } from \"../transport\";\nimport type { Address, Protocol } from \"../types/model\";\n\nconst log = debug(\"werift-ice:packages/ice/src/turn/protocol.ts\");\n\nconst DEFAULT_CHANNEL_REFRESH_TIME = 500;\nconst DEFAULT_ALLOCATION_LIFETIME = 600;\nconst TCP_TRANSPORT = 0x06000000;\nconst UDP_TRANSPORT = 0x11000000;\n\nclass TurnTransport implements Protocol {\n  readonly type = \"turn\";\n  localCandidate!: Candidate;\n  receiver?: Connection;\n\n  constructor(public turn: TurnClient) {\n    turn.onDatagramReceived = this.datagramReceived;\n  }\n\n  private datagramReceived = (data: Buffer, addr: Address) => {\n    try {\n      const message = parseMessage(data);\n      if (!message) {\n        this.receiver?.dataReceived(data, this.localCandidate.component);\n        return;\n      }\n\n      if (\n        (message?.messageClass === classes.RESPONSE ||\n          message?.messageClass === classes.ERROR) &&\n        this.turn.transactions[message.transactionIdHex]\n      ) {\n        const transaction = this.turn.transactions[message.transactionIdHex];\n        transaction.responseReceived(message, addr);\n      } else if (message?.messageClass === classes.REQUEST) {\n        this.receiver?.requestReceived(message, addr, this, data);\n      }\n    } catch (error) {\n      log(\"datagramReceived error\", error);\n    }\n  };\n\n  async request(request: Message, addr: Address, integrityKey?: Buffer) {\n    if (this.turn.transactions[request.transactionIdHex])\n      throw new Error(\"exist\");\n\n    if (integrityKey) {\n      request.addMessageIntegrity(integrityKey);\n      request.addFingerprint();\n    }\n\n    const transaction = new Transaction(request, addr, this);\n    this.turn.transactions[request.transactionIdHex] = transaction;\n\n    try {\n      return await transaction.run();\n    } catch (e) {\n      throw e;\n    } finally {\n      delete this.turn.transactions[request.transactionIdHex];\n    }\n  }\n  async connectionMade() {}\n  async sendData(data: Buffer, addr: Address) {\n    await this.turn.sendData(data, addr);\n  }\n  async sendStun(message: Message, addr: Address) {\n    await this.turn.sendData(message.bytes, addr);\n  }\n}\n\nclass TurnClient implements Protocol {\n  type = \"inner_turn\";\n  readonly onData = new Event<[Buffer, Address]>();\n  transactions: { [hexId: string]: Transaction } = {};\n  integrityKey?: Buffer;\n  nonce?: Buffer;\n  realm?: string;\n  relayedAddress!: Address;\n  mappedAddress!: Address;\n  refreshHandle?: Future;\n  channelNumber = 0x4000;\n  channelByAddr: { [addr: string]: { number: number; address: Address } } = {};\n  addrByChannel: { [channel: number]: Address } = {};\n  localCandidate!: Candidate;\n  /**sec */\n  channelRefreshTime =\n    this.options.channelRefreshTime ?? DEFAULT_CHANNEL_REFRESH_TIME;\n\n  onDatagramReceived: (data: Buffer, addr: Address) => void = () => {};\n\n  private channelBinding?: Promise<void>;\n  channelRefreshAt = 0;\n\n  constructor(\n    public server: Address,\n    public username: string,\n    public password: string,\n    public lifetime: number,\n    public transport: Transport,\n    public options: {\n      /**sec */\n      channelRefreshTime?: number;\n    } = {},\n  ) {}\n\n  async connectionMade() {\n    this.transport.onData = (data, addr) => {\n      this.datagramReceived(data, addr);\n    };\n  }\n\n  private handleChannelData(data: Buffer) {\n    const [channel, length] = jspack.Unpack(\"!HH\", data.slice(0, 4));\n    const addr = this.addrByChannel[channel];\n\n    if (addr) {\n      const payload = data.subarray(4, 4 + length);\n      this.onDatagramReceived(payload, addr);\n      this.onData.execute(payload, addr);\n    }\n  }\n\n  private handleSTUNMessage(data: Buffer, addr: Address) {\n    try {\n      const message = parseMessage(data);\n      if (!message) throw new Error(\"not stun message\");\n      if (\n        message.messageClass === classes.RESPONSE ||\n        message.messageClass === classes.ERROR\n      ) {\n        const transaction = this.transactions[message.transactionIdHex];\n        if (transaction) {\n          transaction.responseReceived(message, addr);\n        }\n      } else if (message.messageClass === classes.REQUEST) {\n        this.onDatagramReceived(data, addr);\n      }\n\n      if (message.getAttributeValue(\"DATA\")) {\n        const buf: Buffer = message.getAttributeValue(\"DATA\");\n        this.onDatagramReceived(buf, addr);\n        this.onData.execute(buf, addr);\n      }\n    } catch (error) {\n      log(\"parse error\", data.toString());\n    }\n  }\n\n  private datagramReceived(data: Buffer, addr: Address) {\n    if (data.length >= 4 && isChannelData(data)) {\n      this.handleChannelData(data);\n    } else {\n      this.handleSTUNMessage(data, addr);\n    }\n  }\n\n  async connect() {\n    const request = new Message(methods.ALLOCATE, classes.REQUEST);\n    request\n      .setAttribute(\"LIFETIME\", this.lifetime)\n      .setAttribute(\"REQUESTED-TRANSPORT\", UDP_TRANSPORT);\n\n    const [response] = await this.requestWithRetry(request, this.server).catch(\n      (e) => {\n        log(\"connect error\", e);\n        throw e;\n      },\n    );\n    this.relayedAddress = response.getAttributeValue(\"XOR-RELAYED-ADDRESS\");\n    this.mappedAddress = response.getAttributeValue(\"XOR-MAPPED-ADDRESS\");\n    const exp = response.getAttributeValue(\"LIFETIME\");\n    log(\"connect\", this.relayedAddress, this.mappedAddress, { exp });\n\n    this.refreshHandle = future(this.refresh(exp));\n  }\n\n  async createPermission(peerAddress: Address) {\n    const request = new Message(methods.CREATE_PERMISSION, classes.REQUEST);\n    request\n      .setAttribute(\"XOR-PEER-ADDRESS\", peerAddress)\n      .setAttribute(\"USERNAME\", this.username)\n      .setAttribute(\"REALM\", this.realm)\n      .setAttribute(\"NONCE\", this.nonce);\n    const [response] = await this.request(request, this.server).catch((e) => {\n      request;\n      throw e;\n    });\n    return response;\n  }\n\n  refresh = (exp: number) =>\n    new PCancelable(async (_, f, onCancel) => {\n      let run = true;\n      onCancel(() => {\n        run = false;\n        f(\"cancel\");\n      });\n\n      while (run) {\n        // refresh before expire\n        const delay = (5 / 6) * exp * 1000;\n        log(\"refresh delay\", delay, { exp });\n        await setTimeout(delay);\n\n        const request = new Message(methods.REFRESH, classes.REQUEST);\n        request.setAttribute(\"LIFETIME\", exp);\n\n        try {\n          const [message] = await this.requestWithRetry(request, this.server);\n          exp = message.getAttributeValue(\"LIFETIME\");\n          log(\"refresh\", { exp });\n        } catch (error) {\n          log(\"refresh error\", error);\n        }\n      }\n    });\n\n  async request(request: Message, addr: Address): Promise<[Message, Address]> {\n    if (this.transactions[request.transactionIdHex]) {\n      throw new Error(\"exist\");\n    }\n    if (this.integrityKey) {\n      request\n        .setAttribute(\"USERNAME\", this.username)\n        .setAttribute(\"REALM\", this.realm)\n        .setAttribute(\"NONCE\", this.nonce)\n        .addMessageIntegrity(this.integrityKey)\n        .addFingerprint();\n    }\n\n    const transaction = new Transaction(request, addr, this);\n    this.transactions[request.transactionIdHex] = transaction;\n\n    try {\n      return await transaction.run();\n    } catch (e) {\n      throw e;\n    } finally {\n      delete this.transactions[request.transactionIdHex];\n    }\n  }\n\n  async requestWithRetry(\n    request: Message,\n    addr: Address,\n  ): Promise<[Message, Address]> {\n    let message: Message, address: Address;\n    try {\n      [message, address] = await this.request(request, addr);\n    } catch (error) {\n      if (error instanceof TransactionFailed == false) {\n        log(\"requestWithRetry error\", error);\n        throw error;\n      }\n\n      // resolve dns address\n      this.server = error.addr;\n\n      const [errorCode] = error.response.getAttributeValue(\"ERROR-CODE\");\n      const nonce = error.response.getAttributeValue(\"NONCE\");\n      const realm = error.response.getAttributeValue(\"REALM\");\n\n      if (\n        ((errorCode === 401 && realm) || (errorCode === 438 && this.realm)) &&\n        nonce\n      ) {\n        log(\"retry with nonce\", errorCode);\n\n        this.nonce = nonce;\n        if (errorCode === 401) {\n          this.realm = realm;\n        }\n        this.integrityKey = makeIntegrityKey(\n          this.username,\n          this.realm!,\n          this.password,\n        );\n\n        request.transactionId = randomTransactionId();\n        [message, address] = await this.request(request, this.server);\n      } else {\n        throw error;\n      }\n    }\n    return [message!, address!];\n  }\n\n  async sendData(data: Buffer, addr: Address) {\n    const channel = await this.getChannel(addr);\n\n    const header = jspack.Pack(\"!HH\", [channel.number, data.length]);\n    this.transport.send(\n      Buffer.concat([Buffer.from(header), data]),\n      this.server,\n    );\n  }\n\n  async getChannel(addr: Address) {\n    if (this.channelBinding) {\n      await this.channelBinding;\n    }\n\n    let channel = this.channelByAddr[addr.join(\"\")];\n\n    if (!channel) {\n      this.channelByAddr[addr.join(\"\")] = {\n        number: this.channelNumber++,\n        address: addr,\n      };\n      channel = this.channelByAddr[addr.join(\"\")];\n      this.addrByChannel[channel.number] = addr;\n\n      this.channelBinding = this.channelBind(channel.number, addr);\n      await this.channelBinding.catch((e) => {\n        log(\"channelBind error\", e);\n        throw e;\n      });\n      this.channelRefreshAt = int(Date.now() / 1000) + this.channelRefreshTime;\n      this.channelBinding = undefined;\n      log(\"channelBind\", channel);\n    } else if (this.channelRefreshAt < int(Date.now() / 1000)) {\n      this.channelBinding = this.channelBind(channel.number, addr);\n      this.channelRefreshAt = int(Date.now() / 1000) + this.channelRefreshTime;\n      await this.channelBinding.catch((e) => {\n        log(\"channelBind error\", e);\n        throw e;\n      });\n      this.channelBinding = undefined;\n      log(\"channelBind refresh\", channel);\n    }\n    return channel;\n  }\n\n  private async channelBind(channelNumber: number, addr: Address) {\n    const request = new Message(methods.CHANNEL_BIND, classes.REQUEST);\n    request\n      .setAttribute(\"CHANNEL-NUMBER\", channelNumber)\n      .setAttribute(\"XOR-PEER-ADDRESS\", addr);\n    const [response] = await this.requestWithRetry(request, this.server);\n    if (response.messageMethod !== methods.CHANNEL_BIND) {\n      throw new Error(\"should be CHANNEL_BIND\");\n    }\n  }\n\n  async sendStun(message: Message, addr: Address) {\n    await this.transport.send(message.bytes, addr);\n  }\n}\n\nexport async function createTurnEndpoint(\n  serverAddr: Address,\n  username: string,\n  password: string,\n  {\n    lifetime,\n    portRange,\n    interfaceAddresses,\n  }: {\n    lifetime?: number;\n    ssl?: boolean;\n    transport?: \"udp\";\n    portRange?: [number, number];\n    interfaceAddresses?: InterfaceAddresses;\n  },\n) {\n  if (lifetime == undefined) {\n    lifetime = DEFAULT_ALLOCATION_LIFETIME;\n  }\n\n  const transport = await UdpTransport.init(\n    \"udp4\",\n    portRange,\n    interfaceAddresses,\n  );\n\n  const turnClient = new TurnClient(\n    serverAddr,\n    username,\n    password,\n    lifetime,\n    transport,\n  );\n\n  await turnClient.connectionMade();\n  await turnClient.connect();\n  const turnTransport = new TurnTransport(turnClient);\n\n  return turnTransport;\n}\n\nexport function makeIntegrityKey(\n  username: string,\n  realm: string,\n  password: string,\n) {\n  return createHash(\"md5\")\n    .update(Buffer.from([username, realm, password].join(\":\")))\n    .digest();\n}\n\nfunction isChannelData(data: Buffer) {\n  return (data[0] & 0xc0) == 0x40;\n}\n"]}