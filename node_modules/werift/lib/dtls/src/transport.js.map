{"version":3,"file":"transport.js","sourceRoot":"","sources":["../../../../dtls/src/transport.ts"],"names":[],"mappings":";;;;;;AACA,kDAA0B;AAE1B,MAAM,GAAG,GAAG,IAAA,eAAK,EAAC,8CAA8C,CAAC,CAAC;AAQlE,MAAa,YAAY;IACvB,YAAoB,GAAW,EAAU,KAA0B;QAAvD;;;;mBAAQ,GAAG;WAAQ;QAAE;;;;mBAAQ,KAAK;WAAqB;QAMnE;;;;;WAA+B;QAE/B;;;;mBAAO,CAAC,GAAW,EAAE,EAAE,CACrB,IAAI,OAAO,CAAO,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;gBACzB,GAAG,CAAC,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC9B,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,GAAG,EAAE,EAAE;oBAC9D,IAAI,GAAG,EAAE,CAAC;wBACR,CAAC,CAAC,GAAG,CAAC,CAAC;oBACT,CAAC;yBAAM,CAAC;wBACN,CAAC,EAAE,CAAC;oBACN,CAAC;gBACH,CAAC,CAAC,CAAC;YACL,CAAC,CAAC;WAAC;QAjBH,GAAG,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,EAAE;YAChC,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC;YACpB,IAAI,IAAI,CAAC,MAAM;gBAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;IACL,CAAC;IAeD,KAAK;QACH,IAAI,CAAC;YACH,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC;QACnB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC,CAAA,CAAC;IACpB,CAAC;CACF;AA1BD,oCA0BC;AAEM,MAAM,kBAAkB,GAAG,CAChC,MAAc,EACd,QAA6B,EAAE,EAC/B,EAAE,CAAC,IAAI,YAAY,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;AAHxB,QAAA,kBAAkB,sBAGM","sourcesContent":["import { RemoteInfo, Socket } from \"dgram\";\nimport debug from \"debug\";\n\nconst log = debug(\"werift-dtls : packages/dtls/src/transport.ts\");\n\nexport interface Transport {\n  onData?: (buf: Buffer) => void;\n  send: (buf: Buffer) => Promise<void>;\n  close: () => void;\n}\n\nexport class UdpTransport implements Transport {\n  constructor(private upd: Socket, private rinfo: Partial<RemoteInfo>) {\n    upd.on(\"message\", (buf, target) => {\n      this.rinfo = target;\n      if (this.onData) this.onData(buf);\n    });\n  }\n  onData?: (buf: Buffer) => void;\n\n  send = (buf: Buffer) =>\n    new Promise<void>((r, f) => {\n      log(\"this.rinfo\", this.rinfo);\n      this.upd.send(buf, this.rinfo.port, this.rinfo.address, (err) => {\n        if (err) {\n          f(err);\n        } else {\n          r();\n        }\n      });\n    });\n\n  close() {\n    try {\n      this.upd.close();\n    } catch (error) {}\n  }\n}\n\nexport const createUdpTransport = (\n  socket: Socket,\n  rinfo: Partial<RemoteInfo> = {},\n) => new UdpTransport(socket, rinfo);\n"]}