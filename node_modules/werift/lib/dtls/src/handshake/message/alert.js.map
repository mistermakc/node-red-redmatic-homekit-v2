{"version":3,"file":"alert.js","sourceRoot":"","sources":["../../../../../../dtls/src/handshake/message/alert.ts"],"names":[],"mappings":";;;AAAA,2DAAkE;AAElE,MAAa,KAAK;IAMhB,YAAmB,KAAa,EAAS,WAAmB;QAAhD;;;;mBAAO,KAAK;WAAQ;QAAE;;;;mBAAO,WAAW;WAAQ;IAAG,CAAC;IAEhE,MAAM,CAAC,WAAW,CAAC,GAAW;QAC5B,OAAO,IAAI,KAAK;QACd,YAAY;QACZ,GAAG,MAAM,CAAC,MAAM,CAAC,IAAA,oBAAM,EAAC,GAAG,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,CAC1C,CAAC;IACJ,CAAC;IAED,SAAS;QACP,MAAM,GAAG,GAAG,IAAA,oBAAM,EAAC,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC;QAC7C,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC1B,CAAC;;AAlBH,sBAmBC;AAlBiB;;;;WAAO;QACrB,KAAK,EAAE,mBAAK,CAAC,KAAK;QAClB,WAAW,EAAE,mBAAK,CAAC,KAAK;KACzB;EAHmB,CAGlB","sourcesContent":["import { decode, encode, types } from \"@shinyoshiaki/binary-data\";\n\nexport class Alert {\n  static readonly spec = {\n    level: types.uint8,\n    description: types.uint8,\n  };\n\n  constructor(public level: number, public description: number) {}\n\n  static deSerialize(buf: Buffer) {\n    return new Alert(\n      //@ts-ignore\n      ...Object.values(decode(buf, Alert.spec)),\n    );\n  }\n\n  serialize() {\n    const res = encode(this, Alert.spec).slice();\n    return Buffer.from(res);\n  }\n}\n"]}