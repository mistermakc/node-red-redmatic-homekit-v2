{"version":3,"file":"ec.js","sourceRoot":"","sources":["../../../../../dtls/src/cipher/ec.ts"],"names":[],"mappings":";;;AAAA,6CAA0C;AAEnC,MAAM,WAAW,GAAG,GAA8C,EAAE;IACzE,MAAM,IAAI,GAAG,WAAI,CAAC,KAAK,CAAC,gBAAgB,EAAE,CAAC;IAC3C,MAAM,GAAG,GAAG,WAAI,CAAC,YAAY,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAC3C,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACrC,MAAM,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAEnC,OAAO;QACL,UAAU;QACV,SAAS;KACV,CAAC;AACJ,CAAC,CAAC;AAVW,QAAA,WAAW,eAUtB;AAEK,MAAM,mBAAmB,GAAG,CAAC,EAClC,SAAS,EACT,UAAU,GAIX,EAAU,EAAE;IACX,MAAM,GAAG,GAAG,WAAI,CAAC,eAAe,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;IACxD,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAE5C,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC;AAXW,QAAA,mBAAmB,uBAW9B","sourcesContent":["import { p256 } from \"@noble/curves/p256\";\n\nexport const p256Keypair = (): { privateKey: Buffer; publicKey: Buffer } => {\n  const priv = p256.utils.randomPrivateKey();\n  const pub = p256.getPublicKey(priv, false);\n  const privateKey = Buffer.from(priv);\n  const publicKey = Buffer.from(pub);\n\n  return {\n    privateKey,\n    publicKey,\n  };\n};\n\nexport const p256PreMasterSecret = ({\n  publicKey,\n  privateKey,\n}: {\n  publicKey: Buffer;\n  privateKey: Buffer;\n}): Buffer => {\n  const res = p256.getSharedSecret(privateKey, publicKey);\n  const secret = Buffer.from(res).subarray(1);\n\n  return secret;\n};\n"]}