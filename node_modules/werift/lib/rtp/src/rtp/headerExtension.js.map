{"version":3,"file":"headerExtension.js","sourceRoot":"","sources":["../../../../../rtp/src/rtp/headerExtension.ts"],"names":[],"mappings":";;;AAAA,6CAA4E;AAG/D,QAAA,iBAAiB,GAAG;IAC/B,OAAO,EAAE,qCAAqC;IAC9C,eAAe,EAAE,+CAA+C;IAChE,mBAAmB,EAAE,wDAAwD;IAC7E,eAAe,EACb,2EAA2E;IAC7E,WAAW,EAAE,4DAA4D;IACzE,oBAAoB,EAClB,yFAAyF;IAC3F,oBAAoB,EAAE,6CAA6C;CAC3D,CAAC;AAMX,SAAgB,yBAAyB,CACvC,UAAuB,EACvB,WAAqC;IAErC,OAAO,UAAU;SACd,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE;QACjB,MAAM,GAAG,GAAG,WAAW,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;QACtC,IAAI,CAAC,GAAG,EAAE,CAAC;YACT,OAAO,EAAE,GAAG,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,CAAC,OAAO,EAAE,CAAC;QACtD,CAAC;QACD,QAAQ,GAAG,EAAE,CAAC;YACZ,KAAK,yBAAiB,CAAC,OAAO,CAAC;YAC/B,KAAK,yBAAiB,CAAC,eAAe,CAAC;YACvC,KAAK,yBAAiB,CAAC,mBAAmB;gBACxC,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE,iBAAiB,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC;YAC9D,KAAK,yBAAiB,CAAC,eAAe;gBACpC,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE,mBAAmB,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC;YAChE,KAAK,yBAAiB,CAAC,WAAW;gBAChC,OAAO;oBACL,GAAG;oBACH,KAAK,EAAE,sBAAsB,CAAC,SAAS,CAAC,OAAO,CAAC;iBACjD,CAAC;YACJ,KAAK,yBAAiB,CAAC,oBAAoB,CAAC,CAAC,CAAC;gBAC5C,OAAO;oBACL,GAAG;oBACH,KAAK,EAAE,+BAA+B,CAAC,SAAS,CAAC,OAAO,CAAC;iBAC1D,CAAC;YACJ,CAAC;YACD;gBACE,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE,SAAS,CAAC,OAAO,EAAE,CAAC;QAC7C,CAAC;IACH,CAAC,CAAC;SACD,MAAM,CAAC,CAAC,GAA2B,EAAE,GAAG,EAAE,EAAE;QAC3C,IAAI,GAAG;YAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC;QAClC,OAAO,GAAG,CAAC;IACb,CAAC,EAAE,EAAE,CAAC,CAAC;AACX,CAAC;AApCD,8DAoCC;AAED,SAAgB,gBAAgB,CAAC,EAAU;IACzC,OAAO,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AACzB,CAAC;AAFD,4CAEC;AAED,SAAgB,wBAAwB,CAAC,EAAU;IACjD,OAAO,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AACzB,CAAC;AAFD,4DAEC;AAED,SAAgB,4BAA4B,CAAC,EAAU;IACrD,OAAO,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AACzB,CAAC;AAFD,oEAEC;AAED,SAAgB,wBAAwB,CAAC,uBAA+B;IACtE,OAAO,IAAA,kBAAY,EAAC,CAAC,CAAC,CAAC,EAAE,CAAC,uBAAuB,CAAC,CAAC,CAAC;AACtD,CAAC;AAFD,4DAEC;AAED,SAAgB,oBAAoB,CAAC,OAAe;IAClD,MAAM,GAAG,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC5B,MAAM,IAAI,GAAG,CAAC,OAAO,IAAI,GAAG,CAAC,GAAG,WAAW,CAAC;IAC5C,GAAG,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACpC,OAAO,GAAG,CAAC;AACb,CAAC;AALD,oDAKC;AAED,SAAgB,6BAA6B,CAAC,KAAa;IACzD,MAAM,MAAM,GAAG,IAAI,eAAS,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9C,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACvB,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;IAE3B,OAAO,MAAM,CAAC,UAAU,CAAC;AAC3B,CAAC;AAND,sEAMC;AAED,SAAgB,iBAAiB,CAAC,GAAW;IAC3C,OAAO,GAAG,CAAC,QAAQ,EAAE,CAAC;AACxB,CAAC;AAFD,8CAEC;AAED,SAAgB,mBAAmB,CAAC,GAAW;IAC7C,OAAO,GAAG,CAAC,YAAY,EAAE,CAAC;AAC5B,CAAC;AAFD,kDAEC;AAED,SAAgB,sBAAsB,CAAC,GAAW;IAChD,OAAO,IAAA,kBAAY,EAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC;AAFD,wDAEC;AAED,SAAgB,+BAA+B,CAAC,GAAW;IACzD,MAAM,MAAM,GAAG,IAAI,eAAS,CAAC,GAAG,CAAC,CAAC;IAClC,MAAM,KAAK,GAAgC;QACzC,CAAC,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC;QAC3B,KAAK,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;KAC1B,CAAC;IACF,OAAO,KAAK,CAAC;AACf,CAAC;AAPD,0EAOC","sourcesContent":["import { BitStream, bufferReader, bufferWriter } from \"../../../common/src\";\nimport { Extension } from \"./rtp\";\n\nexport const RTP_EXTENSION_URI = {\n  sdesMid: \"urn:ietf:params:rtp-hdrext:sdes:mid\",\n  sdesRTPStreamID: \"urn:ietf:params:rtp-hdrext:sdes:rtp-stream-id\",\n  repairedRtpStreamId: \"urn:ietf:params:rtp-hdrext:sdes:repaired-rtp-stream-id\",\n  transportWideCC:\n    \"http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01\",\n  absSendTime: \"http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time\",\n  dependencyDescriptor:\n    \"https://aomediacodec.github.io/av1-rtp-spec/#dependency-descriptor-rtp-header-extension\",\n  audioLevelIndication: \"urn:ietf:params:rtp-hdrext:ssrc-audio-level\",\n} as const;\n\nexport type TransportWideCCPayload = number;\n\nexport type AudioLevelIndicationPayload = { v: boolean; level: number };\n\nexport function rtpHeaderExtensionsParser(\n  extensions: Extension[],\n  extIdUriMap: { [id: number]: string },\n): { [uri: string]: any } {\n  return extensions\n    .map((extension) => {\n      const uri = extIdUriMap[extension.id];\n      if (!uri) {\n        return { uri: \"unknown\", value: extension.payload };\n      }\n      switch (uri) {\n        case RTP_EXTENSION_URI.sdesMid:\n        case RTP_EXTENSION_URI.sdesRTPStreamID:\n        case RTP_EXTENSION_URI.repairedRtpStreamId:\n          return { uri, value: deserializeString(extension.payload) };\n        case RTP_EXTENSION_URI.transportWideCC:\n          return { uri, value: deserializeUint16BE(extension.payload) };\n        case RTP_EXTENSION_URI.absSendTime:\n          return {\n            uri,\n            value: deserializeAbsSendTime(extension.payload),\n          };\n        case RTP_EXTENSION_URI.audioLevelIndication: {\n          return {\n            uri,\n            value: deserializeAudioLevelIndication(extension.payload),\n          };\n        }\n        default:\n          return { uri, value: extension.payload };\n      }\n    })\n    .reduce((acc: { [uri: string]: any }, cur) => {\n      if (cur) acc[cur.uri] = cur.value;\n      return acc;\n    }, {});\n}\n\nexport function serializeSdesMid(id: string) {\n  return Buffer.from(id);\n}\n\nexport function serializeSdesRTPStreamID(id: string) {\n  return Buffer.from(id);\n}\n\nexport function serializeRepairedRtpStreamId(id: string) {\n  return Buffer.from(id);\n}\n\nexport function serializeTransportWideCC(transportSequenceNumber: number) {\n  return bufferWriter([2], [transportSequenceNumber]);\n}\n\nexport function serializeAbsSendTime(ntpTime: bigint) {\n  const buf = Buffer.alloc(3);\n  const time = (ntpTime >> 14n) & 0x00ffffffn;\n  buf.writeUIntBE(Number(time), 0, 3);\n  return buf;\n}\n\nexport function serializeAudioLevelIndication(level: number) {\n  const stream = new BitStream(Buffer.alloc(1));\n  stream.writeBits(1, 1);\n  stream.writeBits(7, level);\n\n  return stream.uint8Array;\n}\n\nexport function deserializeString(buf: Buffer) {\n  return buf.toString();\n}\n\nexport function deserializeUint16BE(buf: Buffer) {\n  return buf.readUInt16BE();\n}\n\nexport function deserializeAbsSendTime(buf: Buffer) {\n  return bufferReader(buf, [3])[0];\n}\n\nexport function deserializeAudioLevelIndication(buf: Buffer) {\n  const stream = new BitStream(buf);\n  const value: AudioLevelIndicationPayload = {\n    v: stream.readBits(1) === 1,\n    level: stream.readBits(7),\n  };\n  return value;\n}\n"]}